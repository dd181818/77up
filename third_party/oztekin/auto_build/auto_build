#!/bin/bash
# Copyright 2013 B. Uygar Oztekin

function print_usage {
echo "Usage: `basename $0` [OPTIONS] [TARGETS]

  Builds and optionally runs TARGETS.

  OPTIONS are:
  -h, --help                Print this message.
  -a, --all                 Compile everying including all matching objects.
  -o, --opt                 Use optimized flags.
  -d, --deb                 Use debug flags (default).
  -c, --compiler COMPILER   Use the specified compiler.
  -f, --flags EXTRA_FLAGS   Extra flags to pass to the compiler.
  -r, --run                 Run the targets.
  -t, --test                Run test targets only.
  -q, --quiet               In conjunction with -r, run the targets quietly.
  -j                        Number of concurrent jobs to use with make.
  -k                        Do not stop on first error.

  If no --deb or --opt is specified, debug mode is assumed.
  If no compiler is specified, `basename $0` tries to locate g++ or clang++ in
  that order and picks the first one found.

  TARGETS are assumed to be binaries. You can refer to binaries using relative
  paths with or without the .cc extension. Special target ... can be used to
  refer to all binaries matching a naming convention under a subdirectory tree.
  (e.g. all *_test.cc and *_example.cc).

  You may want to alias the command for convenient usage:

  alias ab=`readlink -f $(dirname $0)`/`basename $0`

Examples:
  ab clean                 # Cleanup the build state.
  ab -o base/*_test.cc     # Compile all tests under base/ in opt mode
  ab ...                   # Compile all binaries within current directory tree.
  ab util/...              # Compile all binaries under util/

  # Compile and quietly run all tests excluding third_party
  "'ab -r -q `find . | grep _test.cc | grep -v third_party`'"

  # Enter a subdirectory and run `basename $0` with relative paths.
  cd util/cache && ab group_cache_test.cc   # or ab group_cache_test
"
}

OPT_FLAGS='-O2'
DBG_FLAGS='-g'
JOBS=$[`cat /proc/cpuinfo | grep processor | wc -l` * 4]
COMPILER=$(basename $(readlink -f `which g++ clang++ | head -n 1`))

export VARIANT_FLAGS=$DBG_FLAGS

STDOUT=/dev/stdout
STDERR=/dev/stderr

while true ; do
case "$1" in
  -h|--help) print_usage && exit 0;;
  -a|--all) ALL=1;;
  -o|--opt) VARIANT_FLAGS=$OPT_FLAGS;;
  -d|--deb) VARIANT_FLAGS=$DBG_FLAGS;;
  -c|--compiler) shift && COMPILER=$1;;
  -f|--flags) shift && FLAGS=$1;;
  -r|--run) RUN=1;;
  -t|--test) RUN=1 && TEST=1;;
  -q) QUIET=1 && STDOUT=/dev/null && STDERR=/dev/null;;
  -j) shift && JOBS="$1";;
  -k) MAKE_FLAGS="$MAKE_FLAGS -k";;
  --) shift && break ;;
  ""|*) break ;;
esac
shift
done

export COMPILER
export VARIANT_FLAGS
export INVARIANT_FLAGS="-std=c++11 $FLAGS"
export SRC_ROOT=$(readlink -f `dirname $0`)
export OUT_ROOT=$(echo $( [ -d "$TMPDIR" ] && echo "$TMPDIR" || echo /tmp)/$USER $COMPILER $VARIANT_FLAGS/$SRC_ROOT | sed 's#//#/#g; s# #_#g')

[ -z "$1" ] && set '...'

while true ; do
case "$1" in
  clean) TARGETS="clean" && break;;
  "") break ;;
  *...)
  for i in $(find `echo $1 | sed 's/\.\.\.//g'` -type f | grep '\_\(test\|example\|server\).cc' | grep -v third_party) ; do
    TARGET=`readlink -f $i | sed "s#$SRC_ROOT/#$OUT_ROOT/#g" | sed 's#\.cc$##g'` TARGETS="$TARGETS $TARGET"
  done
  if [ "$ALL" == 1 ]; then
  for i in $(find `echo $1 | sed 's/\.\.\.//g'` -type f | grep '\.cc' | grep -v third_party) ; do
    TARGET=`readlink -f $i | sed "s#$SRC_ROOT/#$OUT_ROOT/#g" | sed 's#\.cc$#.o#g'` TARGETS="$TARGETS $TARGET"
  done
  fi
  ;;
  *) TARGET=`readlink -f $1 | sed "s#$SRC_ROOT/#$OUT_ROOT/#g" | sed 's#\.cc$##g'` TARGETS="$TARGETS $TARGET";;
esac
shift
done

cd $SRC_ROOT

export BINS=$TARGETS

make -s -f third_party/oztekin/auto_build/makefile -j $JOBS $MAKE_FLAGS $TARGETS | grep -v '^make: .* is up to date.$'

if [ -n "$RUN" ] ; then
  for i in $TARGETS ; do
    [ "$TEST" == 1 ] && echo $i | grep -q -v '_test$' && continue
    [ "$QUIET" == 1 ] || echo -e "\n[exec] $i"
    LD_LIBRARY_PATH="$SRC_ROOT/third_party/google/gmock/latest/lib/.libs:$SRC_ROOT/third_party/google/gtest/latest/lib/.libs" $i 2>$STDERR 1>$STDOUT && echo "[ ok ] $i" && SUCCESS="$SUCCESS $i" && continue
    echo "[FAIL] $i"
    FAIL="$FAIL $i"
  done
fi

if [ -n "$FAIL" ] ; then
  echo
  echo "Successful targets:"
  echo $SUCCESS | sed "s#$OUT_ROOT/##g;"
  echo
  echo "Failed targets:"
  echo $FAIL | sed "s#$OUT_ROOT/##g;"
  echo
fi
