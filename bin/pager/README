This is a quick and dirty pager setup using a third party library for text
messages and phone calls. Room77 used to use a third party web site for pagers
and alerts when the need emerged first. It was not that convenient, was not
free, and required time / effort to maintain.

I (Uygar) hacked up this replacement solution in one of the short hackatons we
had in Room77. It was more of an explore a cheap, easy to maintain, automated
solution, and it was my first python exposure. With limited amount of time, it
involved some googling, looking at examples, and bugging folks with how do you
do this and that questions (thanks Pramod!). I am sure there are better ways to
do stuff in python. Nevertheless, it ended up working well enough. We ditched
the third party site and have been using this for more than 2 years now with
little modifications.

Uses google voice. It may be possible to modify it to use alternative solutions.

The setup is simple. You have a configuration file where you list phone numbers
and emails of people in the rotation. Every week, it picks a primary and backup
person based on the current time. Rotation happens every monday at 00:00 and
circularly shifts downwards by one person every week.

Script is supposed to run via cron. Our setup had 3 cron jobs:

1) Send a notification email every friday to give a preview of who will become
   the next primary / backup in the upcoming rotation using the --offset_days
   option. Example:
   pager.py --mail_info --offset_days=3

2) Send a notification email shortly after 00:00 every monday to notify that the
   rotation occurred and who became the current primary / backup. Example:
   pager.py --mail_info --offset_days=3

3) Run the pager script periodically every 10-15 minutes to monitor a specific
   email address for emails matching the alert criteria. Example:
   pager.py

Above examples assumes that all required default values are properly set
(monitor email address/password/phone number, sender and receiver emails etc.).

Script logs in and monitors email threads with a specific subject line pattern.
Body of the email is not used for matching purposes.

If a new email thread matching the criteria is found and there are no replies to
the thread, an alert is sent to the primary.

First reply to an alert thread mutes the thread. So if primary is alerted in the
middle of the night, it is best for this person (or someone else) to reply to
the thread with a "Looking into it" reply (body content does not matter) so that
the backup is not alerted in the next run.

If primary is alerted, and in the subsequent run, script still does not see a
reply to "mute" the thread, backup is also alerted. If both primary and backup
are alerted already, no more alerts will be sent for this thread.

Check periodicity should be set to a reasonable number. If it is too short,
primary may not have time to mute the thread and backup ends up getting paged as
well. If it is to long, average response time to alerts increases. We found 10
minutes to be reasonable in our case.

Note that the script uses a mod approach to pick the primary / backup based on
current time. If the number of people in the rotation is changed, you may notice
jumps / skips etc. If you want to add / remove people, you may want to use
pager.py --info feature to see who will become the current primary / backup and
rotate / modify the list accordingly to preserve a desired rotation order.
